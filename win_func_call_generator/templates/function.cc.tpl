/*
 * Copyright 2021 Assured Information Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* This file is automatically generated. Do not edit. */
#include "windows/injection/function.hh"

#include <introvirt/windows/libraries/{{ library_name }}/functions/{{ function_name }}.hh>
#include <introvirt/core/memory/guest_ptr.hh>
#include <introvirt/util/compiler.hh>
#include <introvirt/core/event/ThreadLocalEvent.hh>

{% for namespace in namespaces %}
namespace {{ namespace }} {
{%- endfor %}

{% for arg in arguments -%}

{% for method in arg.get("methods", []) -%}
{{ method.get("result_type", "void") }} {{ function_name }}::{{ method.get("name", "!!MISSING NAME!!") }}(
    {%- for method_arg in method.get("arguments", []) -%}
    {{ method_arg["type"]}} {{ method_arg["name"]}}
    {{ "," if not loop.last }}
    {%- endfor -%}
) {{ "const" if method.get("const") }}{
    {% for line in method.get("code", []) -%}
    {{ line }}
    {% endfor %}
}
{% endfor %}

{% endfor -%}

{% if result["type"] != "void" %}
{% for method in result.get("methods", []) -%}
{{ method.get("result_type", "void") }} {{ function_name }}::{{ method.get("name", "!!MISSING NAME!!") }}(
    {%- for method_arg in method.get("arguments", []) -%}
    {{ method_arg["type"]}} {{ method_arg["name"]}}
    {{ "," if not loop.last }}
    {%- endfor -%}
) {{ "const" if method.get("const") }}{
    {%- for line in method.get("code", []) -%}
    {{ line }}
    {%- endfor -%}
}
{% endfor %}
{% endif %}

const std::string& {{ function_name }}::function_name() const {
    return FunctionName;
}
const std::string& {{ function_name }}::library_name() const {
    return LibraryName;
}
void {{ function_name }}::write(std::ostream& os) const {
    // TODO: Implement this
}
Json::Value {{ function_name }}::json() const {
    Json::Value json;
    Json::Value args;

    {%- for arg in arguments -%}
    {%- for line in arg.get("to_json", []) -%}
    {{ line }}
    {%- endfor %}
    {%- endfor %}

    {% if result["type"] != "void" -%}
    if (returned()) {
        {%- for line in result.get("to_json", []) -%}
        {{ line }}
        {% endfor %}
    }
    {% endif %}

    json["arguments"] = std::move(args);
    return json;
}

{{ function_name }}::{{ function_name }}(Event& event) : WindowsFunctionCall(event, ArgumentCount) {
    {% for arg in arguments -%}
    {%- for line in arg.get("initializer", []) -%}
    {{ line }}
    {%- endfor %}
    {% endfor %}
}

/* Injection constructor */
{{ function_name }}::{{ function_name }}(Event& event,
{%- for arg in arguments -%}
{{ arg.get("injection", {}).get("type") }} {{ arg.get("injection", {}).get("name") }}
{{ "," if not loop.last }}
{%- endfor -%}
) : WindowsFunctionCall(event, ArgumentCount) {
    {%- for arg in arguments -%}
    {% for line in arg["injection"]["inject_code"] %}{{ line }}{% endfor %}
    {% endfor %}
}

{{ function_name }}::~{{ function_name }}() = default;

{% if result["type"] != "void" or result.get("pointer") -%}
{{ result["injection"]["result_type"] }}
{%- else -%}
void
{%- endif %}
{{ function_name }}::inject(
{%- for arg in arguments -%}
{{ arg.get("injection", {}).get("type") }} {{ arg.get("injection", {}).get("name") }}
{{ "," if not loop.last }}
{%- endfor -%}
) {
        auto& event = ThreadLocalEvent::get();
        introvirt::windows::inject::FunctionInjector<{{ function_name }}> injector(event);
        {{ function_name }} handler(event,
        {%- for arg in arguments -%}
        {{ arg.get("injection", {}).get("name") }}
        {{ "," if not loop.last }}
        {%- endfor -%}
        );
        injector.call(handler);
        {%- if result["type"] != "void" or result.get("pointer") -%}
        {%- for line in result["injection"]["result_code"] -%}
        {{ line }}
        {%- endfor %}
        {%- endif %}
}

{% for i in range(namespaces|length - 1, -1, -1) -%}
{% set namespace = namespaces[i] %}
} // namespace {{ namespace }}
{%- endfor %}
